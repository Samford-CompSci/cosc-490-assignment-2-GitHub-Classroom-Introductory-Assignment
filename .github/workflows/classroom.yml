name: GitHub Classroom Workflow

on: 
  push:
    branches:
    - '*'
    - '!status'
    - '!feedback'

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

  issue_comment:
    types: [created]

jobs:
  # job to run autograding
  build:
    name: Autograding
    runs-on: ubuntu-latest
    needs: find-feedback-pr
    timeout-minutes: 5
    steps:
      - uses: actions/checkout@v2

      # delete and recreate result dir
      - name: Reset results dir
        run: |
          rm -rf .github/results
          mkdir -p .github/results

      # test activity 1
      - uses: actions/github-script@v4
        name: "Check Activity 1"
        id: activity1
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // get repo name
            const repoName = context.repo.repo.toLowerCase()

            // get repo members
            const res = await github.repos.listCollaborators({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            let collaborators = res.data
            console.log(collaborators)

            // check if one of collab list matches repository name suffix. make case insensitive.
            if (collaborators.some(collaborator=>repoName.endsWith(collaborator.login.toLowerCase()))) {
              console.log("found collaborator match to repo suffix")

              // write result to file
              const fs = require('fs');
              fs.writeFile('.github/results/activity1.txt', 'pass', function (err) {
                if (err) return console.log(err);
              });

              return 'success'
            }
            else {
              console.log("no match to repo suffix")
              return 'fail'
            }
          result-encoding: string
      
      # test activity 2
      - uses: actions/github-script@v4
        name: "Check Activity 2"
        id: activity2
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // get commits, filtered by actor
            const res = await github.repos.listCommits({
              owner: context.repo.owner,
              repo: context.repo.repo,
              author: context.actor,
            });
            let commitList = res.data
            console.log(commitList)

            // is commit list non-zero
            if (Array.isArray(commitList) && commitList.length) {
              console.log("commits found")

              // write result to file
              const fs = require('fs');
              fs.writeFile('.github/results/activity2.txt', 'pass', function (err) {
                if (err) return console.log(err);
              });

              return 'success'
            }
            else {
              console.log(`no commits for ${context.actor} found`)
              return 'fail'
            }
          result-encoding: string

      # test activity 3
      - uses: actions/github-script@v4
        name: "Check Activity 3"
        id: activity3
        env:
          ISSUE: ${{ needs.find-feedback-pr.outputs.feedback-pr }}
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // get comments on Feedback PR
            const res = await github.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: process.env.ISSUE,
            });
            let commentList = res.data
            console.log(commentList)

            // is comment list non-zero AND does actor equal one of comment authors
            if (Array.isArray(commentList) && commentList.length && commentList.some(comment => comment.user.login == context.actor)) {
              console.log("comments found")

              // write result to file
              const fs = require('fs');
              fs.writeFile('.github/results/activity3.txt', 'pass', function (err) {
                if (err) return console.log(err);
              });

              return 'success'
            }
            else {
              console.log(`no comments for ${context.author} found`)
              return 'fail'
            }
          result-encoding: string

      - run: ls .github/results

      # run grading
      # add id to step so outputs can be referenced
      - uses: education/autograding@v1
        name: "** Grading and Feedback **"
        id: autograder
        continue-on-error: true

      # fail job if autograder returns failed
      # outcome can be 'success', 'failure', 'cancelled', or 'skipped'
      # trigger fail either on !success or on failure depending on preference
      - name: check autograder pass fail
        if: ${{ steps.autograder.outcome != 'success' }}
        run: exit 1

    outputs:
      grading-score: ${{ steps.autograder.outputs.Points }}
      activity1-result: ${{ steps.activity1.outputs.result }}
      activity2-result: ${{ steps.activity2.outputs.result }}
      activity3-result: ${{ steps.activity3.outputs.result }}

  # job to find Feedback PR issue number. If created by Classroom, should be issue 1.
  find-feedback-pr:
    name: Find Feedback PR
    runs-on: ubuntu-latest
    # if: ${{ github.ref == 'refs/heads/main' && github.actor != 'github-classroom[bot]' }}
    if: ${{ github.ref == 'refs/heads/main' }}
    steps:
      # check if PR exists
      # if doesn't exist, create it
      - uses: actions/github-script@v3
        id: check-pr
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            // get list of PRs
            const prList = await github.pulls.list({
              owner: context.repo.owner,
              repo: context.repo.repo,
            });
            // is PR list non-zero
            if (Array.isArray(prList.data) && prList.data.length) {
              // iterate through PR list looking for Feedback PR
              // PR needs to match base branch "feedback" and have "feedback" in title
              for (pr of prList.data) {
                if (pr.head.ref == context.ref.split('/')[2] && pr.base.ref == "feedback" && pr.title.match(/Feedback/i)) {
                  console.log("Feedback PR found")
                  return pr.number
                }
              }
            };
            // try to get feedback branch
            try {
              let res = await github.repos.getBranch({
                owner: context.repo.owner,
                repo: context.repo.repo,
                branch: 'feedback'
              });
              console.log(`Get feedback branch response - status: ${res.status}`)
            } catch(error) {
              if(error.name === 'HttpError' && error.status === 404) {
                // create feedback branch
                let res = await github.git.createRef({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  ref: 'refs/heads/feedback',
                  sha: context.sha,
                });
                console.log(`Create feedback branch response - status: ${res.status}`)
              } else {
                throw Error(error)
              }
            }
            // need something to diff before creating PR
            // get heads/main commit
            let res = await github.repos.getCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'refs/heads/main',
            });
            console.log(`Get refs/heads/main commit response - status: ${res.status}`);
            // create empty commit
            let res = await github.git.createCommit({
              owner: context.repo.owner,
              repo: context.repo.repo,
              message: 'Setup Feedback PR',
              tree: res.data.commit.tree.sha,
              parents: [res.data.sha],
            });
            console.log(`Create empty commit response - status: ${res.status}`);
            // update refs/heads/main
            let res = await github.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: 'heads/main',
              sha: res.data.sha,
            });
            console.log(`Update refs response - status: ${res.status}`);
            // create feedback PR
            const body = `This pull request was created as a place for your Lecturer / Teacher to leave feedback on your work.`
            let res = await github.pulls.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              head: 'main',
              base: 'feedback',
              title: 'Feedback',
              body: body,
            });
            console.log(`Create PR response - status: ${res.status}`)
            return res.number

      - run: echo ${{ steps.check-pr.outputs.result }}

    outputs:
      feedback-pr: ${{ steps.check-pr.outputs.result }}
  
  # job to build activity status icons
  build-activity-icons:
    name: Build Activity Icons
    runs-on: ubuntu-latest
    if: always()
    needs: build
    steps:
      # need to checkout whole repo
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # get quiz score
      - name: Calculate quiz score
        id: quiz-score
        run: |
          if [[ $(git log feedback..main quiz.md) ]]; then
            echo "quiz.md file changed"
            /bin/bash .github/grading-scripts/quiz.sh || echo "::set-output name=quiz_score::0"
          else
            echo "quiz.md file not changed"
          fi

      # switch to status branch
      - run: git checkout status || git checkout -b status

      # make dir for activity status icons
      - name: make icons dir
        run: mkdir -p .github/activity-icons

      # make/copy activity 1 icon
      - name: activity 1 icon
        run: |
          echo ${{ needs.build.outputs.activity1-result }}
          if ${{ needs.build.outputs.activity1-result == 'success' }}; then
            cp .github/templates/activity-completed.svg .github/activity-icons/activity1.svg
          else
            cp .github/templates/activity-incomplete.svg .github/activity-icons/activity1.svg
          fi

      # make/copy activity 2 icon
      - name: activity 2 icon
        run: |
          echo ${{ needs.build.outputs.activity2-result }}
          if ${{ needs.build.outputs.activity2-result == 'success' }}; then
            cp .github/templates/activity-completed.svg .github/activity-icons/activity2.svg
          else
            cp .github/templates/activity-incomplete.svg .github/activity-icons/activity2.svg
          fi

      # make/copy activity 3 icon
      - name: activity 3 icon
        run: |
          echo ${{ needs.build.outputs.activity3-result }}
          if ${{ needs.build.outputs.activity3-result == 'success' }}; then
            cp .github/templates/activity-completed.svg .github/activity-icons/activity3.svg
          else
            cp .github/templates/activity-incomplete.svg .github/activity-icons/activity3.svg
          fi

      # make/copy quiz icon
      - name: quiz icon
        run: |
          if [[ -z "${{ steps.quiz-score.outputs.quiz_score }}" ]]; then
            score=${{ steps.quiz-score.outputs.quiz_score }}
            echo $score

            if [[ $score == 5 ]]; then
              cp .github/templates/quiz5.svg .github/activity-icons/quiz.svg
            else
              cp .github/templates/quiz.svg .github/activity-icons/quiz.svg
              sed -i "s/>[0-9]<\/text>/>${score}<\/text>/" .github/activity-icons/quiz.svg
            fi
          fi

      # create points bar
      - name: points bar
        uses: ./.github/actions/points-bar
        with:
          points: ${{ needs.build.outputs.grading-score }}
          path: '.github/activity-icons/points-bar.svg'

      # commit and push activity icons if statuses have changed
      - name: Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add '.github/activity-icons'
          git commit -m "Add/Update activity icons" || exit 0
      - name: Push badge commit
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: status
